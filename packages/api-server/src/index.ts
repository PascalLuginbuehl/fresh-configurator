import { ApolloServer, ServerInfo } from "apollo-server";
import { makeExecutableSchema } from "graphql-tools";
import { KeyValueCache } from "apollo-server-caching";
import context, { mockedContext } from "./context";
import graph from "./graph";

/**
 * Because sending queries to the server is expensive, we can preload our
 * API server with the queries it expects to receive. This way
 * the queries which want to be performed to do not need to be sent
 * to the server to get the data required.
 *
 * These persisted queries are generated by our graphql-code-generator
 * at the base of this repo.
 */
import persistedQueries from "./graph/__generated__/persisted-queries.json";

export const fillPersistedQueries = (cache: KeyValueCache): Promise<unknown> =>
  Promise.all(
    Object.entries(persistedQueries).map(([key, value]) =>
      cache.set(key, value)
    )
  );

type Server = ApolloServer & {
  listen: (port: number) => Promise<ServerInfo>;
};

// eslint-disable-next-line import/prefer-default-export
export const createServer = ({
  mocked,
  playground,
}: { mocked?: boolean; playground?: boolean } = {}): Server => {
  const server = new ApolloServer({
    // types are wrong for this, schema should be allowed
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    schema: makeExecutableSchema(graph),
    context: mocked ? mockedContext : context,
    playground,
    formatError: (error) => {
      // eslint-disable-next-line no-console
      console.error(JSON.stringify(error));
      return error;
    },
  });

  // override the listen command so that it
  const { listen } = server;
  server.listen = async (port: number) => {
    if (server.requestOptions.persistedQueries?.cache) {
      await fillPersistedQueries(server.requestOptions.persistedQueries.cache);
    }

    return listen.call(server, port);
  };

  return server;
};
