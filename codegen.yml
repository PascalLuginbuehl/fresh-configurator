overwrite: true

# import the schema used to verify documents
# from the typescript files
schema:
  - "./packages/*/src/**/{gql,graph}/**/*.ts":
      noRequire: true
  - "!**/__generated__/*.ts" 

generates:

  # generate server-side resoler types, so that our resolvers
  # can be type-safe
  ./packages/api-server/src/graph/__generated__/index.ts:
    config:
      overwrite: true
      contextType: ../../context#Context
      mappers:
        Connection: ../../mappers#ConnectionMapping
        FlightController: ../../mappers#FlightControllerMapping
        RC: ../../mappers#FlightControllerMapping
    plugins:
      - "typescript"
      - "typescript-resolvers"
  
  # compile queries into their hashed values, so that the client
  # only has to ask the server for the hashed query to perform
  # the request
  ./packages/api-server/src/graph/__generated__/persisted-queries.json:
    documents: "./packages/configurator/src/gql/**/*.graphql"
    config: 
      output: server
      algorithm: sha256
    plugins: 
      - "graphql-codegen-persisted-query-ids"

  # generate type information and query hooks automatically
  # from our client side query and mutation documents
  ./packages/configurator/src/gql/__generated__/index.tsx:
    documents: "./packages/configurator/src/gql/**/*.graphql"
    config:
      withHooks: true
      withComponent: false
      withHOC: false
      contextType: ../apollo#ApolloContext
      apolloReactHooksImportFrom: "../apollo"
      nonOptionalTypename: true
    plugins:
      - "typescript"
      - "typescript-resolvers"
      - "typescript-operations"
      - "typescript-react-apollo"

  # pregenerate the client side persisted query ids, which should
  # match the ones generated by the server
  ./packages/configurator/src/gql/__generated__/persisted-queries.json:
    documents: "./packages/configurator/src/gql/**/*.graphql"
    config:
      output: client
      algorithm: sha256
    plugins:
      - "graphql-codegen-persisted-query-ids"
  
  # generate a schema file containing our entire schema on the client
  # side so that graphql-let can use the schema to generate it's
  # own client side query definitions
  ./packages/configurator/src/gql/__generated__/schema.graphql:
    plugins:
      - schema-ast
